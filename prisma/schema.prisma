// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course{
  id           Int       @id @default(autoincrement())
   courseCode           String      
   courseName String
   major  String
}

model FormConfig {
  id           Int       @id @default(autoincrement()) // Primary Key
  courseId  Int                                       // อ้างอิงไปยังคอร์ส
  version      Int       @default(1)                   // เวอร์ชัน
  formData     Json                                      // JSON ที่เก็บโครงสร้างฟอร์ม
  createdAt    DateTime  @default(now())                // เวลาที่สร้าง

  // ความสัมพันธ์กับ FormSubmission
  FormSubmissions FormSubmission[]

  @@unique([courseId, version]) // กำหนดให้ referenceId + version เป็น unique key
}

model FormSubmission {
  id           Int       @id @default(autoincrement()) // Primary Key
  formConfigId Int                                       // อ้างอิงไปยัง FormConfig
  courseId     Int                                       // อ้างอิงไปยังคอร์ส
  submittedData Json                                     // JSON ที่เก็บข้อมูลที่ผู้ใช้กรอก
  submittedAt  DateTime  @default(now())                // เวลาที่ผู้ใช้กรอกข้อมูล

  // ความสัมพันธ์กับ FormConfig
  FormConfig FormConfig @relation(fields: [formConfigId], references: [id])

  @@index([courseId]) // สร้าง index สำหรับการค้นหาด้วย courseId
}

enum AccountType {
  StdAcc
  AlumAcc
  MISEmpAcc
}
model User {
  id                   String         @id @default(uuid())
  cmuAccountName       String         // ชื่อบัญชี cmu
  cmuAccount           String         @unique
  studentId            String?        // student_id (ถ้ามี)
  prenameId            String?        // prename_id (ถ้ามี)
  prenameTH            String?        // prename_TH (ถ้ามี)
  prenameEN            String?        // prename_EN (ถ้ามี)
  firstNameTH          String
  firstNameEN          String
  lastNameTH           String
  lastNameEN           String
  organizationCode     String
  organizationNameTH   String
  organizationNameEN   String
  it_accountType          AccountType    // itaccounttype_id
  it_accountTypeTH        String         // itaccounttype_TH
  it_accountTypeEN        String         // itaccounttype_EN
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  roles                UserRole[]     // Relation to UserRoles table

  @@map("users")
}

model Role {
  id                   Int       @id @default(autoincrement())
  name                 String       @unique
  description          String?

  userRoles            UserRole[]   // Relation to UserRoles table

  @@map("roles")
}

model UserRole {
  id                   Int       @id @default(autoincrement())
  userId               String
  roleId               Int

  user                 User         @relation(fields: [userId], references: [id])
  role                 Role         @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId]) // Ensure each user-role pair is unique
  @@map("user_roles")
}



model Student {
  id                  String   @id @default(uuid())
  studentId           String   @unique
  prenameTH           String
  prenameEN           String
  firstNameTH         String
  lastNameTH          String
  firstNameEN         String
  lastNameEN          String
  facultyMisId        String
  facultyCode         String
  facultyNameTH       String
  facultyNameEN       String
  departmentId        Int
  departmentNameTH    String
  departmentNameEN    String
  statusId            Int
  statusName          String
  cmuitAccount        String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("students")
}

model Employee {
  id                  String   @id @default(uuid())
  email               String   @unique
  prenameTha          String
  prenameEng          String
  nameTha             String
  middleNameTha       String
  surNameTha          String
  nameEng             String
  middleNameEng       String
  surNameEng          String
  workStatusNameTha   String
  positionNameTha     String
  organizationID1     String
  organizationName1   String
  organizationID2     String
  organizationName2   String
  organizationID3     String
  organizationName3   String
  organizationID4     String
  organizationName4   String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("employees")
}